library(maptools)
library(spCountSamp)
library(rgeos)
setwd("/media/Hitachi2GB/00NMML/RPackages/spCountSamp_package/spCountSamp/inst/data/Sim2")


#-------------------------------------------------------------------------------
#  SAMPLE PLOTS
#-------------------------------------------------------------------------------

ni <- 16
nj <- 16
PlotSize <- 0.3
offst <- (10-.3*16)/(2*17)
ep <- .01
samples <- NULL
ID <- 1
for(i in 1:ni) {
  for (j in 1:nj) {
    if (i != 3 & j != 2 & j != 5)
    {
        xL <- (i-1)*10/ni + offst
        xU <- (i-1)*10/ni + offst + PlotSize
        yL <- (j-1)*10/nj + offst
        yU <- (j-1)*10/nj + offst + PlotSize
        samples <- c(samples, Polygons(list(Polygon(cbind(c(xL, xU, xU, xL, xL),
                                          c(yL, yL, yU, yU, yL)))), ID = ID))
				ID = ID + 1
    }
  }
}
plots <- SpatialPolygons(samples)
df <- data.frame(pltarea = rep(NA, times = length(plots@polygons)))
for(i in 1:length(plots@polygons)) 
	df[i,"pltarea"] <- plots@polygons[[i]]@Polygons[[1]]@area
row.names(df) <- as.character(1:length(plots@polygons))
plots <- SpatialPolygonsDataFrame(plots, df)
plot(plots)


loXlim <- 0
upXlim <- 10
loYlim <- 0
upYlim <- 10
outline <- SpatialPolygons(list(Polygons(list(Polygon(
	cbind(c(loXlim, upXlim, upXlim, loXlim, loXlim),
	c(loYlim, loYlim, upYlim, upYlim, loYlim)))), ID = "bnd")))
plot(outline, add = TRUE)

#-------------------------------------------------------------------------------
#  SIMULATION
#-------------------------------------------------------------------------------

StoreSims <- NULL

niter <- 1000
Start.Time <- Sys.time()
 for (iter in 1:niter) {
	set.seed(4000 + iter)
  lower.x.bbox <- 0
  upper.x.bbox <- 10
  lower.y.bbox <- 0
  upper.y.bbox <- 10
  nseed.big <- 2000
  nseed.sma <- 0
  Poi.mean.big <- 0
  Poi.mean.sma <- 0
  big.range <- .00000001
  sma.range <- 0.02
  trend <- TRUE

  PlotSize <- .5
  pcover <- .5
  SampBal <- TRUE

#debug(point.sim.clus)
  Sim <- pointSimClus(nseed.big = nseed.big,
	  nseed.sma = nseed.sma,
	  Poi.mean.big = Poi.mean.big,
	  Poi.mean.sma = Poi.mean.sma,
	  big.range = big.range,
    sma.range = sma.range,
	  lower.x.lim = 0, upper.x.lim = 10,
	  lower.y.lim = 0, upper.y.lim = 10,
	  lower.x.bbox = lower.x.bbox, upper.x.bbox = upper.x.bbox,
	  lower.y.bbox = lower.y.bbox, upper.y.bbox = upper.y.bbox,
    trend = trend)
  simPts1 <- Sim$SimPts

  simPts <- simPts1

	coordinates(simPts) <- c("x","y")

  TrueAbundance <- length(coordinates(simPts)[,1])

	counts <- rep(NA, times  = length(plots@polygons))
	for(i in 1:length(plots@polygons)) {
		counts[i] <- sum(!is.na(over(simPts, 
			SpatialPolygons(list(plots@polygons[[i]])))))
	}
	# add count data to Photo Plot Outlines
	pltsData <- plots@data
	pltsData[,"counts"] <- counts
	plots@data <- pltsData

# ------------------------------------------------------------------------------
# end standardize x and y coordinates
# ------------------------------------------------------------------------------


  fCnt5 <- floor(.05*length(plots@polygons))
  fCnt5 <- max(fCnt5,1)
  fCnt10 <- floor(.10*length(plots@polygons))
  fCnt10 <- max(fCnt10,1)
  fCnt15 <- floor(.15*length(plots@polygons))
  fCnt15 <- max(fCnt15,1)
  fCnt20 <- floor(.20*length(plots@polygons))
  fCnt20 <- max(fCnt20,1)

  iter.time <- Sys.time()
  plot(c(0,2),c(0,2), type = "n", xlab = "", ylab = "", xaxt = "n", yaxt = "n")
  text(1,1.5, paste("Simulation", iter), cex = 3)
  text(1,0.5, paste("Elapsed Time", iter.time - Start.Time), cex = 2)

	EstOut1 <- spCountSamp(counts ~ 1, outline, plots, 
		nNodesRequestC = 3, 
		nNodesRequestF = 8, percentZero = 75)

	EstOut2 <- spCountSamp(counts ~ 1, outline, plots, 
		nNodesRequestC = 4, 
		nNodesRequestF = 14, percentZero = 75)

	EstOut3 <- spCountSamp(counts ~ 1, outline, plots, 
		nNodesRequestC = 5, 
		nNodesRequestF = 20, percentZero = 75)

	EstOut4 <- spCountSamp(counts ~ 1, outline, plots, 
		nNodesRequestC = 6, 
		nNodesRequestF = 26, percentZero = 75)
    
# ------------------------------------------------------------------------------
# classical random sampling
# ------------------------------------------------------------------------------


  FPCF <- (1-EstOut4$propSurveyed)
  SRSEst <- mean(plots@data[,"counts"]/plots@data[,"pltarea"])*
		outline@polygons[[1]]@Polygons[[1]]@area
  SRSSE <- sqrt(var(plots@data[,"counts"]/plots@data[,"pltarea"]))*
		outline@polygons[[1]]@Polygons[[1]]@area*sqrt(FPCF)/
    sqrt(length(plots@data[,"pltarea"]))
    
  StoreSims <- rbind(StoreSims, data.frame(TrueAbun = TrueAbundance,
    EstF1 = EstOut1$estimateF, StdErrF1 = EstOut1$stdErrF,
    ODTradF1 = EstOut1$ODtradF, ODPercF1 = EstOut1$ODpercF,
		StdErrFV1 = EstOut1$stdErrV, StdErrFR1 = EstOut1$stdErrR,
		StdErrFQ1 = EstOut1$stdErrQ, StdErrFT1 = EstOut1$stdErrT, 
    EstF2 = EstOut2$estimateF, StdErrF2 = EstOut2$stdErrF,
    ODTradF2 = EstOut2$ODtradF, ODPercF2 = EstOut2$ODpercF,
 		StdErrFV2 = EstOut2$stdErrV, StdErrFR2 = EstOut2$stdErrR,
    EstF3 = EstOut3$estimateF, StdErrF3 = EstOut3$stdErrF,
		StdErrFQ2 = EstOut2$stdErrQ, StdErrFT2 = EstOut2$stdErrT,
    ODTradF3 = EstOut3$ODtradF, ODPercF3 = EstOut3$ODpercF,
		StdErrFV3 = EstOut3$stdErrV, StdErrFR3 = EstOut3$stdErrR,
    EstF4 = EstOut4$estimateF, StdErrF4 = EstOut4$stdErrF,
		StdErrFQ3 = EstOut3$stdErrQ, StdErrFT3 = EstOut3$stdErrT,
    ODTradF4 = EstOut4$ODtradF, ODPercF4 = EstOut4$ODpercF,
		StdErrFV4 = EstOut4$stdErrV, StdErrFR4 = EstOut4$stdErrR,
		StdErrFQ4 = EstOut4$stdErrQ, StdErrFT4 = EstOut4$stdErrT,
    EstSRS = SRSEst, StdErrSRS = SRSSE))

  write.table(StoreSims, "StoreSims2_130505.csv", quote = F, sep = ",", row.names = F)

}

#SimSummary(read.csv("StoreSims2_130505.csv"),"F1","Vary") 

#X11()
#boxplot(read.csv("StoreSims2_130505.csv")[,"StdErrF1"]*sqrt(read.csv("StoreSims2_130505.csv")[,"ODTradF1"]), read.csv("StoreSims2_130505.csv")[,"StdErrFQ1"],read.csv("StoreSims2_130505.csv")[,"StdErrFR1"],read.csv("StoreSims2_130505.csv")[,"StdErrFV1"],read.csv("StoreSims2_130505.csv")[,"StdErrFT1"])

#X11()
#boxplot(read.csv("StoreSims2_130505.csv")[,"StdErrF2"]*sqrt(read.csv("StoreSims2_130505.csv")[,"ODTradF2"]), read.csv("StoreSims2_130505.csv")[,"StdErrFQ2"],read.csv("StoreSims2_130505.csv")[,"StdErrFR2"],read.csv("StoreSims2_130505.csv")[,"StdErrFV2"],read.csv("StoreSims2_130505.csv")[,"StdErrFT2"])

