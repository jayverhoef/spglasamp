library(maptools)
library(spCountSamp)


#-------------------------------------------------------------------------------
#  SAMPLE PLOTS
#-------------------------------------------------------------------------------

ni <- 16
nj <- 16
PlotSize <- 0.3
offst <- (10-.3*16)/(2*17)
ep <- .01
samples <- NULL
ID <- 1
for(i in 1:ni) {
  for (j in 1:nj) {
    if (i != 3 & j != 2 & j != 5)
    {
        xL <- (i-1)*10/ni + offst
        xU <- (i-1)*10/ni + offst + PlotSize
        yL <- (j-1)*10/nj + offst
        yU <- (j-1)*10/nj + offst + PlotSize
        samples <- c(samples, Polygons(list(Polygon(cbind(c(xL, xU, xU, xL, xL),
                                          c(yL, yL, yU, yU, yL)))), ID = ID))
				ID = ID + 1
    }
  }
}
plots <- SpatialPolygons(samples)
df <- data.frame(pltarea = rep(NA, times = length(plots@polygons)))
for(i in 1:length(plots@polygons)) 
	df[i,"pltarea"] <- plots@polygons[[i]]@Polygons[[1]]@area
row.names(df) <- as.character(1:length(plots@polygons))
plots <- SpatialPolygonsDataFrame(plots, df)
plot(plots)


loXlim <- 0
upXlim <- 10
loYlim <- 0
upYlim <- 10
outline <- SpatialPolygons(list(Polygons(list(Polygon(
	cbind(c(loXlim, upXlim, upXlim, loXlim, loXlim),
	c(loYlim, loYlim, upYlim, upYlim, loYlim)))), ID = "bnd")))
plot(outline, add = TRUE)

#-------------------------------------------------------------------------------
#  SIMULATION
#-------------------------------------------------------------------------------

iter <- 1

StoreSims <- NULL

niter <- 50
ODlist <- vector("list", niter)
Start.Time <- Sys.time()
 for (iter in 1:niter) {
	set.seed(iter)
  lower.x.bbox <- runif(1, 3.5, 4.5)
  upper.x.bbox <- runif(1, 7.5, 8.5)
  lower.y.bbox <- runif(1, 3.5, 4.5)
  upper.y.bbox <- runif(1, 7.5, 8.5)
  nseed.big <- 100
  nseed.sma <- 25
  Poi.mean.big <- 15
  Poi.mean.sma <- 9
  big.range <- 1
  sma.range <- 0.02
  trend <- TRUE

  PlotSize <- .5
  pcover <- .5
  SampBal <- TRUE

  Sim <- pointSimClus(nseed.big = nseed.big,
	  nseed.sma = nseed.sma,
	  Poi.mean.big = Poi.mean.big,
	  Poi.mean.sma = Poi.mean.sma,
	  big.range = big.range,
    sma.range = sma.range,
	  lower.x.lim = 0, upper.x.lim = 10,
	  lower.y.lim = 0, upper.y.lim = 10,
	  lower.x.bbox = lower.x.bbox, upper.x.bbox = upper.x.bbox,
	  lower.y.bbox = lower.y.bbox, upper.y.bbox = upper.y.bbox,
    trend = trend)
  simPts1 <- Sim$SimPts

  simPts <- simPts1

	coordinates(simPts) <- c("x","y")
#	plot(simPts, add = TRUE, pch = 19, cex = .5)

  TrueAbundance <- length(coordinates(simPts)[,1])

	counts <- rep(NA, times  = length(plots@polygons))
	for(i in 1:length(plots@polygons)) {
		counts[i] <- sum(!is.na(over(simPts, 
			SpatialPolygons(list(plots@polygons[[i]])))))
	}
	# add count data to Photo Plot Outlines
	pltsData <- plots@data
	pltsData[,"counts"] <- counts
	plots@data <- pltsData

# ------------------------------------------------------------------------------
# end standardize x and y coordinates
# ------------------------------------------------------------------------------

   fCnt1 <- floor(.02*length(plots@polygons))
  fCnt1 <- max(fCnt1,1)
  fCnt2 <- floor(.05*length(plots@polygons))
  fCnt2 <- max(fCnt2,1)
  fCnt3 <- floor(.08*length(plots@polygons))
  fCnt3 <- max(fCnt3,1)
  fCnt4 <- floor(.12*length(plots@polygons))
  fCnt4 <- max(fCnt4,1)

  iter.time <- Sys.time()
  plot(c(0,2),c(0,2), type = "n", xlab = "", ylab = "", xaxt = "n", yaxt = "n")
  text(1,1.5, paste("Simulation", iter), cex = 3)
  text(1,0.5, paste("Elapsed Time", iter.time - Start.Time), cex = 2)

	EstOut1 <- spCountSamp(counts ~ 1, outline, plots, 
		nNodesRequestC = max(ceiling(fCnt1/5),2), 
		nNodesRequestF = floor(4*fCnt1/5), percentZero = 75)

	EstOut2 <- spCountSamp(counts ~ 1, outline, plots, 
		nNodesRequestC = max(ceiling(fCnt2/5),2), 
		nNodesRequestF = floor(4*fCnt2/5), percentZero = 75)

	EstOut3 <- spCountSamp(counts ~ 1, outline, plots, 
		nNodesRequestC = max(ceiling(fCnt3/5),2), 
		nNodesRequestF = floor(4*fCnt3/5), percentZero = 75)

	EstOut4 <- spCountSamp(counts ~ 1, outline, plots, 
		nNodesRequestC = max(ceiling(fCnt4/5),2), 
		nNodesRequestF = floor(4*fCnt4/5), percentZero = 75)
    
	ODlist[[iter]] <- list(fixed = ODbyFit(EstOut1, plots, "fixed"),
		random = ODbyFit(EstOut1, plots, "random"))

}

plot(c(-11,4),c(0,6), type = "n", xlab = "Log(Expected)", ylab = "Estimated Overdispersion")
for(i in 1:niter)
points(log(ODlist[[i]]$fixed[,1]), ODlist[[i]]$fixed[,2], pch = 19, cex = .7)

plot(c(-11,4),c(0,6), type = "n", xlab = "Log(Expected)", ylab = "Estimated Overdispersion")
for(i in 1:niter)
points(log(ODlist[[i]]$random[,1]), ODlist[[i]]$random[,2], pch = 19, cex = .7)


