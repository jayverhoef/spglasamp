    x <- wsamples$bdry[[i]]$x
    y <- wsamples$bdry[[i]]$y
    nx <- length(x)
    x <- (x - xmean.fix)/xystdv.fix
    y <- (y - ymean.fix)/xystdv.fix
    polybound <- cbind(x,y)
    TempPlot <- owin(poly = list(x = x, y = y))
    Area <- TempPlot$bdry[[1]]$area
    ipout <- inpip(xy, polybound)
    predin <- inout(predgrd, polybound)
    predgrd <- predgrd[!predin,]
    cnt <- length(ipout)
    centroidx <- centroid.owin(TempPlot)$x
    centroidy <- centroid.owin(TempPlot)$y
    SpatialCountData <- rbind(SpatialCountData, data.frame(centroidx = centroidx,
      centroidy = centroidy, Area = Area, Count = cnt, Density = cnt/Area))
#    plot(TempPlot, add = TRUE)
  }
  NpredgrdFinal <- length(predgrd[,1])
  ProportionUnsurveyed <- NpredgrdFinal/NpredgrdOriginal
  MaxDens.fix <- max(SpatialCountData[,"Density"])
  SpatialCountData[,"StdDens"] <- SpatialCountData[,"Density"]/MaxDens.fix
# ------------------------------------------------------------------------------
# end standardize x and y coordinates
# ------------------------------------------------------------------------------
  fCnt5 <- floor(sum(SpatialCountData[,"Count"] > 0)/20)
  fCnt5 <- max(fCnt5,1)
  fCnt10 <- floor(sum(SpatialCountData[,"Count"] > 0)/10)
  fCnt10 <- max(fCnt10,1)
  fCnt20 <- floor(sum(SpatialCountData[,"Count"] > 0)/5)
  fCnt20 <- max(fCnt20,1)
  fCnt30 <- floor(sum(SpatialCountData[,"Count"] > 0)/3.3333333)
  fCnt30 <- max(fCnt30,1)
  iter.time <- Sys.time()
  plot(c(0,2),c(0,2), type = "n", xlab = "", ylab = "", xaxt = "n", yaxt = "n")
  text(1,1.5, paste("Simulation", iter), cex = 3)
  text(1,0.5, paste("Elapsed Time", iter.time - Start.Time), cex = 2)
#  source("D:\\00NMML\\GlacierPhotoSampling\\Functions4PPPSamp100920.r")
#  debug(isspifac)
  EstOut <- isspifac(SurvAreaBoundaryClassOwin = SurvArea,
    PlotCountsDataFrame = SpatialCountData, DensVarName  = "StdDens",
    CountVarName = "Count", AreaVarName = "Area",
    xColName = "centroidx", yColName = "centroidy",
    nNodesRequestF = ceiling(fCnt5/2), nNodesRequestC = fCnt5 + ceiling(fCnt5/2), ScaleFactorDens = MaxDens.fix,
    PredictionGrid = predgrd, ProportionUnsurveyed = ProportionUnsurveyed)
#  debug(isspifac)
  EstOut1 <- isspifac(SurvAreaBoundaryClassOwin = SurvArea,
    PlotCountsDataFrame = SpatialCountData, DensVarName  = "StdDens",
    CountVarName = "Count", AreaVarName = "Area",
    xColName = "centroidx", yColName = "centroidy",
    nNodesRequestF = ceiling(fCnt10/2), nNodesRequestC = fCnt10 + ceiling(fCnt10/2), ScaleFactorDens = MaxDens.fix,
    PredictionGrid = predgrd, ProportionUnsurveyed = ProportionUnsurveyed)
  EstOut2 <- isspifac(SurvAreaBoundaryClassOwin = SurvArea,
    PlotCountsDataFrame = SpatialCountData, DensVarName  = "StdDens",
    CountVarName = "Count", AreaVarName = "Area",
    xColName = "centroidx", yColName = "centroidy",
    nNodesRequestF = ceiling(fCnt20/2), nNodesRequestC = fCnt20 + ceiling(fCnt20/2), ScaleFactorDens = MaxDens.fix,
    PredictionGrid = predgrd, ProportionUnsurveyed = ProportionUnsurveyed)
  EstOut3 <- isspifac(SurvAreaBoundaryClassOwin = SurvArea,
    PlotCountsDataFrame = SpatialCountData, DensVarName  = "StdDens",
    CountVarName = "Count", AreaVarName = "Area",
    xColName = "centroidx", yColName = "centroidy",
    nNodesRequestF = ceiling(fCnt30/2), nNodesRequestC = fCnt30 + ceiling(fCnt30/2), ScaleFactorDens = MaxDens.fix,
    PredictionGrid = predgrd, ProportionUnsurveyed = ProportionUnsurveyed)
#TrueAbundance
#str(EstOut)
#str(EstOut1)
#str(EstOut2)
#str(EstOut3)
#Preds <- EstOut2$Predictions
#str(Preds)
#win.graph()
#pred0xy <- data.frame(x = Preds[,1], y = Preds[,2], z = log(MaxDens.fix*Preds[,3]))
#levelplot(z ~ x*y, data = pred0xy)
#win.graph()
#Obs0xy <- data.frame(x = SpatialCountData[,1], y = SpatialCountData[,2],
#  z = MaxDens.fix*SpatialCountData[,6])
#plot(Obs0xy[,"x"], Obs0xy[,"y"], pch = 19, cex = .5 + 2*Obs0xy[,"z"]/MaxDens.fix)
#points(EstOut2$NodeLocationsF, pch = 19, col = "green")
#points(EstOut2$NodeLocationsC, pch = 19, col = "red")
# ------------------------------------------------------------------------------
# classical random sampling
# ------------------------------------------------------------------------------
  MultFact <- sum(SpatialCountData[,"Area"])/
    (1-ProportionUnsurveyed)
  SRSEst <- mean(SpatialCountData[,"Density"])*MultFact
  SRSSE <- sqrt(var(SpatialCountData[,"Density"])*MultFact^2/
    length(SpatialCountData[,1]))*ProportionUnsurveyed
  StoreSims <- rbind(StoreSims, cbind(data.frame(TrueAbun = TrueAbundance),
    SPP5.Est = EstOut$Estimate, SPP5.StdErr = EstOut$StdError,
    SPP5.StdErr1 = EstOut$StdError1, SPP5.ODTrad = EstOut$OverDispFactorTrad,
    SPP5.ODMed = EstOut$OverDispFactorMedian, SPP5.OD1 = EstOut$OverDispFactor1,
    SPP5.ODPlus = EstOut$OverDispFactorPlus,
    SPP10.Est = EstOut1$Estimate, SPP10.StdErr = EstOut1$StdError,
    SPP10.StdErr1 = EstOut1$StdError1, SPP10.ODTrad = EstOut1$OverDispFactorTrad,
    SPP10.ODMed = EstOut1$OverDispFactorMedian, SPP10.OD1 = EstOut1$OverDispFactor1,
    SPP10.ODPlus = EstOut1$OverDispFactorPlus,
    SPP20.Est = EstOut2$Estimate, SPP20.StdErr = EstOut2$StdError,
    SPP20.StdErr1 = EstOut2$StdError1, SPP20.ODTrad = EstOut2$OverDispFactorTrad,
    SPP20.ODMed = EstOut2$OverDispFactorMedian, SPP20.OD1 = EstOut2$OverDispFactor1,
    SPP20.ODPlus = EstOut2$OverDispFactorPlus,
    SPP30.Est = EstOut3$Estimate, SPP30.StdErr = EstOut3$StdError,
    SPP30.StdErr1 = EstOut3$StdError1, SPP30.ODTrad = EstOut3$OverDispFactorTrad,
    SPP30.ODMed = EstOut3$OverDispFactorMedian, SPP30.OD1 = EstOut3$OverDispFactor1,
    SPP30.ODPlus = EstOut3$OverDispFactorPlus,
    SRS.Est = SRSEst, SRS.StdErr = SRSSE))
  write.table(StoreSims, "StoreSims1.csv", quote = F, sep = ",", row.names = F)
}
StoreSims1 <- StoreSims
#debug(SimSummary)
rbind(SimSummary(StoreSims1, "SPP5", "ODTrad"),
  SimSummary(StoreSims1, "SPP5", "ODMed"),
  SimSummary(StoreSims1, "SPP5", "OD1"),
  SimSummary(StoreSims1, "SPP5", "ODPlus"),
  SimSummary(StoreSims1, "SPP5", "ODTrad", 1),
  SimSummary(StoreSims1, "SPP5", "ODMed", 1),
  SimSummary(StoreSims1, "SPP5", "OD1", 1),
  SimSummary(StoreSims1, "SPP5", "ODPlus", 1),
  SimSummary(StoreSims1, "SRS")
)
rbind(SimSummary(StoreSims1, "SPP10", "ODTrad"),
  SimSummary(StoreSims1, "SPP10", "ODMed"),
  SimSummary(StoreSims1, "SPP10", "OD1"),
  SimSummary(StoreSims1, "SPP10", "ODPlus"),
  SimSummary(StoreSims1, "SPP10", "ODTrad", 1),
  SimSummary(StoreSims1, "SPP10", "ODMed", 1),
  SimSummary(StoreSims1, "SPP10", "OD1", 1),
  SimSummary(StoreSims1, "SPP10", "ODPlus", 1),
  SimSummary(StoreSims1, "SRS")
)
rbind(SimSummary(StoreSims1, "SPP20", "ODTrad"),
  SimSummary(StoreSims1, "SPP20", "ODMed"),
  SimSummary(StoreSims1, "SPP20", "OD1"),
  SimSummary(StoreSims1, "SPP20", "ODPlus"),
  SimSummary(StoreSims1, "SPP20", "ODTrad", 1),
  SimSummary(StoreSims1, "SPP20", "ODMed", 1),
  SimSummary(StoreSims1, "SPP20", "OD1", 1),
  SimSummary(StoreSims1, "SPP20", "ODPlus", 1),
  SimSummary(StoreSims1, "SRS")
)
rbind(SimSummary(StoreSims1, "SPP30", "ODTrad"),
  SimSummary(StoreSims1, "SPP30", "ODMed"),
  SimSummary(StoreSims1, "SPP30", "OD1"),
  SimSummary(StoreSims1, "SPP30", "ODPlus"),
  SimSummary(StoreSims1, "SPP30", "ODTrad", 1),
  SimSummary(StoreSims1, "SPP30", "ODMed", 1),
  SimSummary(StoreSims1, "SPP30", "OD1", 1),
  SimSummary(StoreSims1, "SPP30", "ODPlus", 1),
  SimSummary(StoreSims1, "SRS")
)
library(maptools)
source("D:\\00NMML\\GlacierPhotoSampling\\Functions4PPPSamp100920.r")
setwd("D:\\00NMML\\GlacierPhotoSampling\\Sim1")
require(splancs, quietly = TRUE)
require(spatstat, quietly = TRUE)
#-------------------------------------------------------------------------------
#  SAMPLE PLOTS
#-------------------------------------------------------------------------------
ni <- 16
nj <- 16
PlotSize <- 0.3
offst <- (10-.3*16)/(2*17)
ep <- .01
i <- 1
j <- 1
samples <- NULL
for(i in 1:ni) {
  for (j in 1:nj) {
#    if (i != 3 & j != 2 & j != 5)
    {
        xL <- (i-1)*10/ni + offst
        xU <- (i-1)*10/ni + offst + PlotSize
        yL <- (j-1)*10/nj + offst
        yU <- (j-1)*10/nj + offst + PlotSize
        samples <- c(samples, list( list( x = c(xL, xU, xU, xL),
                                          y = c(yL, yL, yU, yU)
                                        )
                                   )
                     )
    }
  }
}
wsamples <- owin(poly = samples)
plot(wsamples)
lower.x.lim <- 0
upper.x.lim <- 10
lower.y.lim <- 0
upper.y.lim <- 10
w <- owin(poly = list(
      x = c(lower.x.lim, upper.x.lim, upper.x.lim, lower.x.lim),
      y = c(lower.y.lim, lower.y.lim, upper.y.lim, upper.y.lim)
    )
)
plot(w, add = TRUE)
#-------------------------------------------------------------------------------
#  SIMULATION
#-------------------------------------------------------------------------------
require(splancs, quietly = TRUE)
require(spatstat, quietly = TRUE)
StoreSims <- NULL
niter <- 500
Start.Time <- Sys.time()
 for (iter in 1:niter) {
  lower.x.bbox <- 0
  upper.x.bbox <- 10
  lower.y.bbox <- 0
  upper.y.bbox <- 10
  nseed.big <- 2000
  nseed.sma <- 0
  Poi.mean.big <- 0
  Poi.mean.sma <- 0
  big.range <- .00000001
  sma.range <- 0.02
  trend <- TRUE
  PlotSize <- .5
  pcover <- .5
  SampBal <- TRUE
#debug(point.sim.clus)
  Sim <- point.sim.clus(nseed.big = nseed.big,
  nseed.sma = nseed.sma,
  Poi.mean.big = Poi.mean.big,
  Poi.mean.sma = Poi.mean.sma,
  big.range = big.range,
    sma.range = sma.range,
  lower.x.lim = 0, upper.x.lim = 10,
  lower.y.lim = 0, upper.y.lim = 10,
  lower.x.bbox = lower.x.bbox, upper.x.bbox = upper.x.bbox,
  lower.y.bbox = lower.y.bbox, upper.y.bbox = upper.y.bbox,
    trend = trend)
  SimPts1 <- Sim$SimPts
#  lower.x.bbox <- runif(1, 5.4, 6.2)
#  upper.x.bbox <- runif(1, 7.8, 8.6)
#  lower.y.bbox <- runif(1, 5.4, 6.2)
#  upper.y.bbox <- runif(1, 7.8, 8.6)
#  lower.x.bbox <- runif(1, 0, 8.99999)
#  upper.x.bbox <- runif(1, lower.x.bbox, lower.x.bbox + 1)
#  lower.y.bbox <- runif(1, 0, 8.99999)
#  upper.y.bbox <- runif(1, lower.y.bbox, lower.y.bbox + 1)
#  nseed.big <- 100
#  nseed.sma <- 25
#  Poi.mean.big <- 10
#  Poi.mean.sma <- 10
#  big.range <- 1
#  sma.range <- 0.02
#  trend <- TRUE
#  PlotSize <- .5
#  pcover <- .5
#  SampBal <- TRUE
#debug(point.sim.clus)
#  Sim <- point.sim.clus(nseed.big = nseed.big,
#  nseed.sma = nseed.sma,
#  Poi.mean.big = Poi.mean.big,
#  Poi.mean.sma = Poi.mean.sma,
#  big.range = big.range,
#    sma.range = sma.range,
#  lower.x.lim = 0, upper.x.lim = 10,
#  lower.y.lim = 0, upper.y.lim = 10,
#  lower.x.bbox = lower.x.bbox, upper.x.bbox = upper.x.bbox,
#  lower.y.bbox = lower.y.bbox, upper.y.bbox = upper.y.bbox,
#    trend = trend)
#  SimPts2 <- Sim$SimPts
#  SimPts <- rbind(SimPts1, SimPts2)
  SimPts <- SimPts1
  TrueAbundance <- length(SimPts[,1])
  SimPts <- as.points(SimPts[,1], SimPts[,2])
  SimPtsPPP <- ppp(SimPts[,1], SimPts[,2], window = w)
  SimPtsSampled <- SimPtsPPP[wsamples]
  plot(wsamples)
  plot(w, add = TRUE)
  points(SimPts, pch = 19, cex = .5, col = "grey50")
  plot(SimPtsSampled, pch = 19, cex = .5, add = T)
  wnotsampled <- w
  cumlist <- list(wnotsampled$bdry[[1]])
  cumarea <- 0
  for(i in 1:length(wsamples$bdry)) {
    tmplist <- wsamples$bdry[[i]]
    tmplist$hole <- TRUE
    cumarea <- cumarea + tmplist$area
    cumlist <- c(cumlist,list(tmplist))
  }
  wnotsampled$bdry <- cumlist
  ProportionUnsurveyed <- (100 - cumarea)/100
  SimPtsNotSampled <- SimPtsPPP[wnotsampled]
# ------------------------------------------------------------------------------
# standardize x and y coordinates
# ------------------------------------------------------------------------------
  x <- w$bdry[[1]]$x
  y <- w$bdry[[1]]$y
  noutline <- length(x)
  xmean.fix <- mean(x)
  ymean.fix <- mean(y)
  xystdv.fix <- mean(sqrt(var(x)), sqrt(var(y)))
  SurvArea <- owin(poly = list(
      x = (x - xmean.fix)/xystdv.fix,
      y = (y - ymean.fix)/xystdv.fix
    )
  )
#  plot(SurvArea)
  x <- (SimPts[,1] - xmean.fix)/xystdv.fix
  y <- (SimPts[,2] - ymean.fix)/xystdv.fix
  pointdata <- ppp(x, y, window = SurvArea)
  xy <- cbind(x,y)
#  plot(pointdata, pch = 19, cex = .5, add = TRUE)
  lower.x.lim <- SurvArea$xrange[1]
  upper.x.lim <- SurvArea$xrange[2]
  lower.y.lim <- SurvArea$yrange[1]
  upper.y.lim <- SurvArea$yrange[2]
  GridPts <- point.sim.syst(nrow = 211, ncol = 211,
  lower.x.lim = lower.x.lim,
  upper.x.lim = upper.x.lim,
  lower.y.lim = lower.y.lim,
  upper.y.lim = upper.y.lim)
  GridPtsPPP <- ppp(GridPts[,1], GridPts[,2], window = SurvArea)
  GridPtsPPP <- GridPtsPPP[SurvArea]
  predgrd <- cbind(GridPtsPPP$x, GridPtsPPP$y)
  NpredgrdOriginal <- length(predgrd[,1])
#  plot(SurvArea)
#  points(predgrd, pch = 19, cex = .3)
  SpatialCountData <- NULL
  i <- 2
  for(i in 1:length(wsamples$bdry)) {
    x <- wsamples$bdry[[i]]$x
    y <- wsamples$bdry[[i]]$y
    nx <- length(x)
    x <- (x - xmean.fix)/xystdv.fix
    y <- (y - ymean.fix)/xystdv.fix
    polybound <- cbind(x,y)
    TempPlot <- owin(poly = list(x = x, y = y))
    Area <- TempPlot$bdry[[1]]$area
    ipout <- inpip(xy, polybound)
    predin <- inout(predgrd, polybound)
    predgrd <- predgrd[!predin,]
    cnt <- length(ipout)
    centroidx <- centroid.owin(TempPlot)$x
    centroidy <- centroid.owin(TempPlot)$y
    SpatialCountData <- rbind(SpatialCountData, data.frame(centroidx = centroidx,
      centroidy = centroidy, Area = Area, Count = cnt, Density = cnt/Area))
#    plot(TempPlot, add = TRUE)
  }
  NpredgrdFinal <- length(predgrd[,1])
  ProportionUnsurveyed <- NpredgrdFinal/NpredgrdOriginal
  MaxDens.fix <- max(SpatialCountData[,"Density"])
  SpatialCountData[,"StdDens"] <- SpatialCountData[,"Density"]/MaxDens.fix
# ------------------------------------------------------------------------------
# end standardize x and y coordinates
# ------------------------------------------------------------------------------
  fCnt5 <- floor(sum(SpatialCountData[,"Count"] > 0)/20)
  fCnt5 <- max(fCnt5,1)
  fCnt10 <- floor(sum(SpatialCountData[,"Count"] > 0)/10)
  fCnt10 <- max(fCnt10,1)
  fCnt20 <- floor(sum(SpatialCountData[,"Count"] > 0)/5)
  fCnt20 <- max(fCnt20,1)
  fCnt30 <- floor(sum(SpatialCountData[,"Count"] > 0)/3.3333333)
  fCnt30 <- max(fCnt30,1)
  iter.time <- Sys.time()
  plot(c(0,2),c(0,2), type = "n", xlab = "", ylab = "", xaxt = "n", yaxt = "n")
  text(1,1.5, paste("Simulation", iter), cex = 3)
  text(1,0.5, paste("Elapsed Time", iter.time - Start.Time), cex = 2)
#  source("D:\\00NMML\\GlacierPhotoSampling\\Functions4PPPSamp100920.r")
#  debug(isspifac)
  EstOut <- isspifac(SurvAreaBoundaryClassOwin = SurvArea,
    PlotCountsDataFrame = SpatialCountData, DensVarName  = "StdDens",
    CountVarName = "Count", AreaVarName = "Area",
    xColName = "centroidx", yColName = "centroidy",
    nNodesRequestF = ceiling(fCnt5/2), nNodesRequestC = fCnt5 + ceiling(fCnt5/2), ScaleFactorDens = MaxDens.fix,
    PredictionGrid = predgrd, ProportionUnsurveyed = ProportionUnsurveyed)
#  debug(isspifac)
  EstOut1 <- isspifac(SurvAreaBoundaryClassOwin = SurvArea,
    PlotCountsDataFrame = SpatialCountData, DensVarName  = "StdDens",
    CountVarName = "Count", AreaVarName = "Area",
    xColName = "centroidx", yColName = "centroidy",
    nNodesRequestF = ceiling(fCnt10/2), nNodesRequestC = fCnt10 + ceiling(fCnt10/2), ScaleFactorDens = MaxDens.fix,
    PredictionGrid = predgrd, ProportionUnsurveyed = ProportionUnsurveyed)
  EstOut2 <- isspifac(SurvAreaBoundaryClassOwin = SurvArea,
    PlotCountsDataFrame = SpatialCountData, DensVarName  = "StdDens",
    CountVarName = "Count", AreaVarName = "Area",
    xColName = "centroidx", yColName = "centroidy",
    nNodesRequestF = ceiling(fCnt20/2), nNodesRequestC = fCnt20 + ceiling(fCnt20/2), ScaleFactorDens = MaxDens.fix,
    PredictionGrid = predgrd, ProportionUnsurveyed = ProportionUnsurveyed)
  EstOut3 <- isspifac(SurvAreaBoundaryClassOwin = SurvArea,
    PlotCountsDataFrame = SpatialCountData, DensVarName  = "StdDens",
    CountVarName = "Count", AreaVarName = "Area",
    xColName = "centroidx", yColName = "centroidy",
    nNodesRequestF = ceiling(fCnt30/2), nNodesRequestC = fCnt30 + ceiling(fCnt30/2), ScaleFactorDens = MaxDens.fix,
    PredictionGrid = predgrd, ProportionUnsurveyed = ProportionUnsurveyed)
#TrueAbundance
#str(EstOut)
#str(EstOut1)
#str(EstOut2)
#str(EstOut3)
#Preds <- EstOut2$Predictions
#str(Preds)
#win.graph()
#pred0xy <- data.frame(x = Preds[,1], y = Preds[,2], z = log(MaxDens.fix*Preds[,3]))
#levelplot(z ~ x*y, data = pred0xy)
#win.graph()
#Obs0xy <- data.frame(x = SpatialCountData[,1], y = SpatialCountData[,2],
#  z = MaxDens.fix*SpatialCountData[,6])
#plot(Obs0xy[,"x"], Obs0xy[,"y"], pch = 19, cex = .5 + 2*Obs0xy[,"z"]/MaxDens.fix)
#points(EstOut2$NodeLocationsF, pch = 19, col = "green")
#points(EstOut2$NodeLocationsC, pch = 19, col = "red")
# ------------------------------------------------------------------------------
# classical random sampling
# ------------------------------------------------------------------------------
  MultFact <- sum(SpatialCountData[,"Area"])/
    (1-ProportionUnsurveyed)
  SRSEst <- mean(SpatialCountData[,"Density"])*MultFact
  SRSSE <- sqrt(var(SpatialCountData[,"Density"])*MultFact^2/
    length(SpatialCountData[,1]))*ProportionUnsurveyed
  StoreSims <- rbind(StoreSims, cbind(data.frame(TrueAbun = TrueAbundance),
    SPP5.Est = EstOut$Estimate, SPP5.StdErr = EstOut$StdError,
    SPP5.StdErr1 = EstOut$StdError1, SPP5.ODTrad = EstOut$OverDispFactorTrad,
    SPP5.ODMed = EstOut$OverDispFactorMedian, SPP5.OD1 = EstOut$OverDispFactor1,
    SPP5.ODPlus = EstOut$OverDispFactorPlus,
    SPP10.Est = EstOut1$Estimate, SPP10.StdErr = EstOut1$StdError,
    SPP10.StdErr1 = EstOut1$StdError1, SPP10.ODTrad = EstOut1$OverDispFactorTrad,
    SPP10.ODMed = EstOut1$OverDispFactorMedian, SPP10.OD1 = EstOut1$OverDispFactor1,
    SPP10.ODPlus = EstOut1$OverDispFactorPlus,
    SPP20.Est = EstOut2$Estimate, SPP20.StdErr = EstOut2$StdError,
    SPP20.StdErr1 = EstOut2$StdError1, SPP20.ODTrad = EstOut2$OverDispFactorTrad,
    SPP20.ODMed = EstOut2$OverDispFactorMedian, SPP20.OD1 = EstOut2$OverDispFactor1,
    SPP20.ODPlus = EstOut2$OverDispFactorPlus,
    SPP30.Est = EstOut3$Estimate, SPP30.StdErr = EstOut3$StdError,
    SPP30.StdErr1 = EstOut3$StdError1, SPP30.ODTrad = EstOut3$OverDispFactorTrad,
    SPP30.ODMed = EstOut3$OverDispFactorMedian, SPP30.OD1 = EstOut3$OverDispFactor1,
    SPP30.ODPlus = EstOut3$OverDispFactorPlus,
    SRS.Est = SRSEst, SRS.StdErr = SRSSE))
  write.table(StoreSims, "StoreSims1.csv", quote = F, sep = ",", row.names = F)
}
StoreSims1 <- StoreSims
#debug(SimSummary)
rbind(SimSummary(StoreSims1, "SPP5", "ODTrad"),
  SimSummary(StoreSims1, "SPP5", "ODMed"),
  SimSummary(StoreSims1, "SPP5", "OD1"),
  SimSummary(StoreSims1, "SPP5", "ODPlus"),
  SimSummary(StoreSims1, "SPP5", "ODTrad", 1),
  SimSummary(StoreSims1, "SPP5", "ODMed", 1),
  SimSummary(StoreSims1, "SPP5", "OD1", 1),
  SimSummary(StoreSims1, "SPP5", "ODPlus", 1),
  SimSummary(StoreSims1, "SRS")
)
rbind(SimSummary(StoreSims1, "SPP10", "ODTrad"),
  SimSummary(StoreSims1, "SPP10", "ODMed"),
  SimSummary(StoreSims1, "SPP10", "OD1"),
  SimSummary(StoreSims1, "SPP10", "ODPlus"),
  SimSummary(StoreSims1, "SPP10", "ODTrad", 1),
  SimSummary(StoreSims1, "SPP10", "ODMed", 1),
  SimSummary(StoreSims1, "SPP10", "OD1", 1),
  SimSummary(StoreSims1, "SPP10", "ODPlus", 1),
  SimSummary(StoreSims1, "SRS")
)
rbind(SimSummary(StoreSims1, "SPP20", "ODTrad"),
  SimSummary(StoreSims1, "SPP20", "ODMed"),
  SimSummary(StoreSims1, "SPP20", "OD1"),
  SimSummary(StoreSims1, "SPP20", "ODPlus"),
  SimSummary(StoreSims1, "SPP20", "ODTrad", 1),
  SimSummary(StoreSims1, "SPP20", "ODMed", 1),
  SimSummary(StoreSims1, "SPP20", "OD1", 1),
  SimSummary(StoreSims1, "SPP20", "ODPlus", 1),
  SimSummary(StoreSims1, "SRS")
)
rbind(SimSummary(StoreSims1, "SPP30", "ODTrad"),
  SimSummary(StoreSims1, "SPP30", "ODMed"),
  SimSummary(StoreSims1, "SPP30", "OD1"),
  SimSummary(StoreSims1, "SPP30", "ODPlus"),
  SimSummary(StoreSims1, "SPP30", "ODTrad", 1),
  SimSummary(StoreSims1, "SPP30", "ODMed", 1),
  SimSummary(StoreSims1, "SPP30", "OD1", 1),
  SimSummary(StoreSims1, "SPP30", "ODPlus", 1),
  SimSummary(StoreSims1, "SRS")
)
#debug(SimSummary)
rbind(SimSummary(StoreSims1, "SPP5", "ODTrad"),
  SimSummary(StoreSims1, "SPP5", "ODMed"),
  SimSummary(StoreSims1, "SPP5", "OD1"),
  SimSummary(StoreSims1, "SPP5", "ODPlus"),
  SimSummary(StoreSims1, "SPP5", "ODTrad", 1),
  SimSummary(StoreSims1, "SPP5", "ODMed", 1),
  SimSummary(StoreSims1, "SPP5", "OD1", 1),
  SimSummary(StoreSims1, "SPP5", "ODPlus", 1),
  SimSummary(StoreSims1, "SRS")
)
rbind(SimSummary(StoreSims1, "SPP10", "ODTrad"),
  SimSummary(StoreSims1, "SPP10", "ODMed"),
  SimSummary(StoreSims1, "SPP10", "OD1"),
  SimSummary(StoreSims1, "SPP10", "ODPlus"),
  SimSummary(StoreSims1, "SPP10", "ODTrad", 1),
  SimSummary(StoreSims1, "SPP10", "ODMed", 1),
  SimSummary(StoreSims1, "SPP10", "OD1", 1),
  SimSummary(StoreSims1, "SPP10", "ODPlus", 1),
  SimSummary(StoreSims1, "SRS")
)
rbind(SimSummary(StoreSims1, "SPP20", "ODTrad"),
  SimSummary(StoreSims1, "SPP20", "ODMed"),
  SimSummary(StoreSims1, "SPP20", "OD1"),
  SimSummary(StoreSims1, "SPP20", "ODPlus"),
  SimSummary(StoreSims1, "SPP20", "ODTrad", 1),
  SimSummary(StoreSims1, "SPP20", "ODMed", 1),
  SimSummary(StoreSims1, "SPP20", "OD1", 1),
  SimSummary(StoreSims1, "SPP20", "ODPlus", 1),
  SimSummary(StoreSims1, "SRS")
)
rbind(SimSummary(StoreSims1, "SPP30", "ODTrad"),
  SimSummary(StoreSims1, "SPP30", "ODMed"),
  SimSummary(StoreSims1, "SPP30", "OD1"),
  SimSummary(StoreSims1, "SPP30", "ODPlus"),
  SimSummary(StoreSims1, "SPP30", "ODTrad", 1),
  SimSummary(StoreSims1, "SPP30", "ODMed", 1),
  SimSummary(StoreSims1, "SPP30", "OD1", 1),
  SimSummary(StoreSims1, "SPP30", "ODPlus", 1),
  SimSummary(StoreSims1, "SRS")
)
